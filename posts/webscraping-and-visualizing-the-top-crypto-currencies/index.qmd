---
title: "Webscraping and Visualizing the Top CryptoCurrencies"
subtitle: "Top Cryptocurrencies According to Price and Market Cap"
date: "2024-07-4"
categories: [Webscraping, Data Visualization]
code-fold: true
code-copy: hover
code-summary: "Show the code"
image: image.jpeg
---

```{css, echo = FALSE}
.justify {
  text-align:justify !important
}
```

Cryptocurrencies have captivated the financial world, bringing immense joy to some and heartache to many. One thing is certain: when you get it right and strike gold with cryptocurrencies, it can set you up for life (depending on your frugality and investment amount). As a data scientist, I know the thrill of diving into this dynamic market.

This post, however, isnâ€™t about trading strategies or price forecasting. Instead, it's a exploring the capabilities of R in web scraping using the `rvest` package. Since I like to spend time in creating good visuals, I will be making some interesting visualization here.

## Getting Our data
The goal is to scrape data from the web and visualize the data. In this case I'll be scraping the data from coinmarketcap.com.
```{r}
#| label: load-packages
library(pacman)
p_load(rvest, tidyverse)

url <- "https://coinmarketcap.com/all/views/all/"

crypto <- read_html(url) |> 
  html_nodes("table") |> 
  html_table()

crypto <- crypto[[3]]

head(crypto)
```

## Explore Data
Now that I've obtained the data, I can explore the data.
**Is the data clean?.** 
There are a lot of columns not needed when I imported the data. I'll use the `janitor` package `clean_names()` function to clean the name of the columns. After that, I will select the columns that are of interest.

```{r}
#| label: data-clean-up

crypto <- crypto |> 
  janitor::clean_names() |> 
  select(name, symbol, market_cap, price)

glimpse(crypto)
```

**Is the data structure as expected?**
From the data which we have above, there are some columns that needs their data types changed. The *market_cap* and *price* column should be numeric/double data type and not character.
```{r}
#| label: missing-data-check
crypto <- crypto |> 
  mutate(
    market_cap = str_remove_all(market_cap, r"--[\$[\d.]+]--"),
    market_cap = parse_number(market_cap),
    price = parse_number(price)
  )

str(crypto)
```
**Is the data complete?**
I will check for missing data using `skimr` package
```{r}
skimr::n_missing(crypto)
```

```{r}
skimr::skim(crypto)
```
*market_cap* and *price* are having missing values and I will clean this to return only the complete rows and columns.

```{r}
crypto <- crypto[complete.cases(crypto), ]
skimr::skim_without_charts(crypto)
```

