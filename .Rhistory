hd_wf_set,
fn = "tune_race_anova",
resamples = hd_folds,
seed = 3343,
verbose = TRUE
)
hd_wf_tune
hd_wf_tune
autoplot(hd_wf_tune)
hd_wf_tune |>
rank_results()
hd_wf_tune |>
rank_results(rank_metric = "accuracy")
hd_wf_tune |>
rank_results(rank_metric = "accuracy") |>
filter(.metric == "accuracy")
#| label: import-library
#| message: false
#| warning: false
library(pacman)
p_load(tidyverse, tidymodels, gt, finetune, bonsai)
#| label: tbl-load-dataset
#| message: false
#| warning: false
#| tbl-cap: Data Preview
heart_disease <- read_csv("heart_disease_dataset.csv")
head(heart_disease) |>
gt() |>
tab_header(
title = "Heart Diseases"
) |>
opt_stylize(
style = 2,
color = "cyan"
) |>
as_raw_html()
#| label: tbl-preview-data
#| tbl: Quick description of the data
skimr::skim_without_charts(heart_disease) |>
gt() |>
tab_spanner(
label = "Character",
columns = character.min:character.whitespace
) |>
tab_spanner(
label = "Numeric",
columns = starts_with("numeric")
) |>
cols_label(
skim_type ~ "Type",
skim_variable ~"Variable",
n_missing ~ "Missing?",
complete_rate ~ "Complete?",
character.min ~ "Min",
character.max ~ "Max",
character.empty ~ "Empty",
character.n_unique ~ "Unique",
character.whitespace ~ "Gap",
numeric.mean ~ "Mean",
numeric.sd ~ "SD",
numeric.p0 ~ "Min",
numeric.p25 ~ "25%",
numeric.p50 ~ "Median",
numeric.p75 ~ "75%",
numeric.p100 ~ "Max"
) |>
cols_width(
skim_type ~ px(80),
everything() ~ px(70)
) |>
opt_stylize(
style = 2,
color = "cyan",
) |>
as_raw_html()
#| label: convert-chr-to-fct
heart_diseases <- heart_disease |>
janitor::clean_names() |>
mutate(
across(where(is.character), factor),
exercise_hours = factor(exercise_hours),
stress_level = factor(stress_level),
heart_disease = factor(
heart_disease,
labels = c("No","Yes"),
levels = c(0, 1)
)
)
#| label: fig-pairs
#| message: false
#| warning: false
#| fig-cap: "Scattered Matrix Plots of variables"
GGally::ggscatmat(
data = heart_diseases,
columns = 1:ncol(heart_diseases),
color = "heart_disease",
alpha = .3
)
#| label: fig-corplot
#| message: false
#| warning: false
#| fig-cap: "Correlation plot of numeric variables"
GGally::ggcorr(
data = heart_diseases,
columns = 1:ncol(heart_diseases),
name = expression(rho),
geom = "circle",
size = 3,
min_size = 5,
max_size = 10,
angle = -45
) +
ggtitle("Correlation Plot of Numeric Variables")
#| label: fig-outcome
#| fig-cap: Frequency of Heart Disease Outcome
heart_diseases |>
ggplot(aes(heart_disease, fill = gender)) +
geom_bar(position = "dodge") +
labs(
x = "Heart disease",
y = "Frequency",
title = "Heart disease a bit more prevalent in male than females"
) +
ggthemes::scale_fill_fivethirtyeight()
#| label: data-splitting
set.seed(832)
hd_split <- initial_split(heart_diseases, prop = .75)
hd_train <- training(hd_split)
hd_folds <- vfold_cv(hd_train)
head(hd_train) |>
gt() |>
opt_stylize(
style = 2,
color = "cyan"
) |>
as_raw_html()
#| label: model specification
knn_spec <- nearest_neighbor(
neighbors = tune(),
weight_func = tune(),
dist_power = tune()
) |>
set_engine("kknn") |>
set_mode("classification")
glm_spec <- logistic_reg() |>
set_engine("glm", family = stats::binomial(link = "logit")) |>
set_mode("classification")
#| label: knn-spc
knn_spec |>  translate()
#| label: glm-spec
glm_spec |> translate()
#| label: data-preproc
formula <- recipe(
heart_disease ~ .,
data = hd_train
)
normalize <- formula |>
step_normalize(all_numeric_predictors())
dummy <- normalize |>
step_dummy(all_factor_predictors())
#| label: tbl-preproc-2
#| tbl-cap: Preview of normalized preprocessed data
normalize |>
prep() |>
juice() |>
head() |>
gt() |>
opt_stylize(
style = 3,
color = "cyan"
)
#| label: tbl-preproc-3
#| tbl-cap: Preview of dummy + normalized preprocessed data
dummy |>
prep() |>
juice() |>
head() |>
gt() |>
opt_stylize(
style = 2,
color = "cyan"
) |>
as_raw_html()
#| label: model-workflow
hd_wf_set<- workflow_set(
preproc = list(
form = formula,
norm = normalize,
dum = dummy
),
models = list(
glm = glm_spec,
knn = knn_spec
)
)
#| label: opt-add
hd_wf_set <- hd_wf_set |>
option_add(
id = "no_rec_knn",
grid = knn_grid,
control = grid_control
) |>
option_add(
id = "log_knn",
grid = knn_grid,
control = grid_control
) |>
option_add(
id = "no_rec_knn",
grid = knn_latin,
control = grid_control
) |>
option_add(
id = "log_knn",
grid = knn_latin,
control = grid_control
)
#| label: fig-tune-grid
#| fig-cap: Tuning grids to be used for K-nearest  neighbor model specification
#| fig-subcap: |
#|  - knn regular tune grid
#|  - knn latin hypercube tune grid
set.seed(34443)
knn_grid <- knn_spec |>
extract_parameter_set_dials() |>
grid_regular(levels = 6)
knn_latin <- knn_spec |>
extract_parameter_set_dials() |>
grid_latin_hypercube(size = 300)
grid_control <- control_race(
save_pred = TRUE,
save_workflow = TRUE
)
knn_grid |>
ggplot(aes(dist_power, neighbors, col = weight_func)) +
geom_point() +
ggthemes::scale_color_colorblind() +
labs(
x = "Minkowski distance",
y = "Number of Neighbors",
title = "k-NN Regular Grid"
) +
facet_wrap(~weight_func) +
theme(
legend.position = "none"
)
knn_latin |>
ggplot(aes(dist_power, neighbors, col = weight_func)) +
geom_point() +
ggthemes::scale_color_tableau() +
labs(
x = "Minkowski distance",
y = "Number of Neighbors",
title = "k-NN Latin Hypercube Grid"
) +
facet_wrap(~weight_func) +
theme(
legend.position = "none"
)
hd_wf_set
#| label: opt-add
hd_wf_set <- hd_wf_set |>
option_add(
id = "norm_knn",
grid = knn_grid,
control = grid_control
) |>
option_add(
id = "form_knn",
grid = knn_grid,
control = grid_control
) |>
option_add(
id = "norm_knn",
grid = knn_latin,
control = grid_control
) |>
option_add(
id = "form_knn",
grid = knn_latin,
control = grid_control
) |>
option_add(
id = "dum_knn",
grid = knn_grid,
control = grid_control
) |>
option_add(
id = "dum_knn",
grid = knn_latin,
control = grid_control
)
#| label: model-workflow
hd_wf_set<- workflow_set(
preproc = list(
form = formula,
norm = normalize,
dum = dummy
),
models = list(
glm = glm_spec,
knn = knn_spec
)
)
hd_wf_set
#| label: opt-add
hd_tune <- hd_wf_set |>
option_add(
id = "norm_knn",
grid = knn_grid,
control = grid_control
) |>
option_add(
id = "form_knn",
grid = knn_grid,
control = grid_control
) |>
option_add(
id = "norm_knn",
grid = knn_latin,
control = grid_control
) |>
option_add(
id = "form_knn",
grid = knn_latin,
control = grid_control
) |>
option_add(
id = "dum_knn",
grid = knn_grid,
control = grid_control
) |>
option_add(
id = "dum_knn",
grid = knn_latin,
control = grid_control
)
hd_tune
#| label: tune-model
doParallel::registerDoParallel(cores = 6)
hd_tune_res <- workflow_map(
hd_tune,
fn = "tune_race_anova",
resamples = hd_folds,
seed = 3343
)
hd_tune_res <- workflow_map(
hd_tune ,
fn = "tune_race_anova",
resamples = hd_folds,
seed = 3343
)
hd_tune_res <- workflow_map(
hd_tune ,
fn = "tune_race_anova",
resamples = hd_folds,
seed = 3343,
verbose = TRUE
)
#| label: fig-tune-res
autoplot(hd_wf_tune)
#| label: fig-tune-res
autoplot(hd_tune_res)
#| label: tune-res
hd_wf_tune |>
rank_results(rank_metric = "accuracy") |>
filter(.metric == "accuracy") |>
select(-c(.metric,  preprocessor, n)) |>
gt() |>
cols_label(
wflow_id = "Model ID",
.config = "Model Number"
) |>
opt_stylize(
style = 2,
color = "cyan"
) |>
as_raw_html()
#| label: tune-res
hd_tune_res |>
rank_results(rank_metric = "accuracy") |>
filter(.metric == "accuracy") |>
select(-c(.metric,  preprocessor, n)) |>
gt() |>
cols_label(
wflow_id = "Model ID",
.config = "Model Number"
) |>
opt_stylize(
style = 2,
color = "cyan"
) |>
as_raw_html()
?option_add
url <- "https://coinmarketcap.com/all/views/all/"
library(pacman)
library(pacman)
p_load(rvest, tidyverse)
read_html(url) |>
html_nodes("table")
read_html(url) |>
html_nodes("table") |>
read_table()
read_html(url) |>
html_nodes("table") |>
html_table()
crypto <- read_html(url) |>
html_nodes("table")
crypto[[3]]
crypto <- read_html(url) |>
html_nodes("table") |>
html_table()
crypto[[3]]
crypto <- crypto[[3]]
head(crypto)
#| label: data-clean-up
crypto |>
janitor::clean_names()
#| label: data-clean-up
crypto |>
janitor::clean_names() |>
select(name, symbol, market_cap, price)
#| label: data-clean-up
crypto <- crypto |>
janitor::clean_names() |>
select(name, symbol, market_cap, price)
#| label: data-clean-up
crypto <- crypto |>
janitor::clean_names() |>
select(name, symbol, market_cap, price)
head(crypto)
#| label: missing-data-check
crypto
#| label: missing-data-check
summary(crypto)
#| label: missing-data-check
crypto |>
mutate(
market_cap = str_remove(market_cap, r"--[\$[\d]+\$]--"),
price = parse_number(price)
)
#| label: missing-data-check
crypto |>
mutate(
market_cap = str_remov_alle(market_cap, r"--[\$[\d]+\$]--"),
price = parse_number(price)
)
#| label: missing-data-check
crypto |>
mutate(
market_cap = str_remove_all(market_cap, r"--[\$[\d]+\$]--"),
price = parse_number(price)
)
#| label: missing-data-check
crypto |>
mutate(
market_cap = str_remove_all(market_cap, r"--[\$[\d.]\$]--"),
price = parse_number(price)
)
#| label: missing-data-check
crypto |>
mutate(
market_cap = str_remove_all(market_cap, r"--[\$[\d.]+]--"),
price = parse_number(price)
)
#| label: missing-data-check
crypto |>
mutate(
market_cap = str_remove_all(market_cap, r"--[\$[\d.]+]--"),
market_cap = parse_number(market_cap),
price = parse_number(price)
)
#| label: missing-data-check
crypto <- crypto |>
mutate(
market_cap = str_remove_all(market_cap, r"--[\$[\d.]+]--"),
market_cap = parse_number(market_cap),
price = parse_number(price)
) |>
filter(complete.cases(crypto))
head(crypto)
#| label: missing-data-check
crypto <- crypto |>
mutate(
market_cap = str_remove_all(market_cap, r"--[\$[\d.]+]--"),
market_cap = parse_number(market_cap),
price = parse_number(price)
) |>
filter(complete.cases(crypto))
url <- "https://coinmarketcap.com/all/views/all/"
crypto <- read_html(url) |>
html_nodes("table") |>
html_table()
crypto <- crypto[[3]]
head(crypto)
#| label: data-clean-up
crypto <- crypto |>
janitor::clean_names() |>
select(name, symbol, market_cap, price)
head(crypto)
#| label: missing-data-check
crypto <- crypto |>
mutate(
market_cap = str_remove_all(market_cap, r"--[\$[\d.]+]--"),
market_cap = parse_number(market_cap),
price = parse_number(price)
) |>
filter(complete.cases(crypto))
crypto
crypto
complete.cases(crypto)
crypto[complete.cases(crypto), ]
