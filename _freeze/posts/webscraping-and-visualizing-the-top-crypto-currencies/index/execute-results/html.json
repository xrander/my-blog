{
  "hash": "cff0530fb2a47530979ceeb069a79a8d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Webscraping and Visualizing the Top CryptoCurrencies\"\nsubtitle: \"Top Cryptocurrencies According to Price and Market Cap\"\ndate: \"2024-07-4\"\ncategories: [Webscraping, Data Visualization]\ncode-fold: true\ncode-copy: hover\ncode-summary: \"Show the code\"\nimage: image.jpeg\n---\n\n\nCryptocurrencies have captivated the financial world, bringing immense joy to some and heartache to many. One thing is certain: when you get it right and strike gold with cryptocurrencies, it can set you up for life (depending on your frugality and investment amount). As a data scientist, I know the thrill of diving into this dynamic market.\n\nThis post, however, isn’t about trading strategies or price forecasting. Instead, it's a exploring the capabilities of R in web scraping using the `rvest` package. Since I like to spend time in creating good visuals, I will be making some interesting visualization here.\n\n## Getting Our data\nThe goal is to scrape data from the web and visualize the data. In this case I'll be scraping the data from coinmarketcap.com.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(rvest, tidyverse)\n\nurl <- \"https://coinmarketcap.com/all/views/all/\"\n\ncrypto <- read_html(url) |> \n  html_nodes(\"table\") |> \n  html_table()\n\ncrypto <- crypto[[3]]\n\nhead(crypto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1,001\n   Rank Name        Symbol `Market Cap` Price `Circulating Supply` `Volume(24h)`\n  <int> <chr>       <chr>  <chr>        <chr> <chr>                <chr>        \n1     1 BTCBitcoin  BTC    $1.13T$1,12… $57,… 19,719,431 BTC       $36,726,237,…\n2     2 ETHEthereum ETH    $378.33B$37… $3,1… 120,195,136 ETH *    $19,466,352,…\n3     3 USDTTether… USDT   $112.4B$112… $0.9… 112,484,875,383 USD… $71,224,850,…\n4     4 BNBBNB      BNB    $77.56B$77,… $525… 147,582,964 BNB *    $1,969,368,7…\n5     5 SOLSolana   SOL    $62.34B$62,… $134… 462,768,865 SOL *    $3,168,623,4…\n6     6 USDCUSDC    USDC   $32.86B$32,… $1.00 32,861,234,560 USDC… $6,923,535,8…\n# ℹ 994 more variables: `% 1h` <chr>, `% 24h` <chr>, `% 7d` <chr>, `` <lgl>,\n#   `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>,\n#   `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>,\n#   `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>,\n#   `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>,\n#   `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>,\n#   `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, `` <lgl>, …\n```\n\n\n:::\n:::\n\n\n## Explore Data\nNow that I've obtained the data, I can explore the data.\n**Is the data clean?.** \nThere are a lot of columns not needed when I imported the data. I'll use the `janitor` package `clean_names()` function to clean the name of the columns. After that, I will select the columns that are of interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrypto <- crypto |> \n  janitor::clean_names() |> \n  select(name, symbol, market_cap, price)\n\nglimpse(crypto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 200\nColumns: 4\n$ name       <chr> \"BTCBitcoin\", \"ETHEthereum\", \"USDTTether USDt\", \"BNBBNB\", \"…\n$ symbol     <chr> \"BTC\", \"ETH\", \"USDT\", \"BNB\", \"SOL\", \"USDC\", \"XRP\", \"TON\", \"…\n$ market_cap <chr> \"$1.13T$1,129,824,593,080\", \"$378.33B$378,328,786,533\", \"$1…\n$ price      <chr> \"$57,294.99\", \"$3,147.62\", \"$0.9992\", \"$525.55\", \"$134.71\",…\n```\n\n\n:::\n:::\n\n\n**Is the data structure as expected?**\nFrom the data which we have above, there are some columns that needs their data types changed. The *market_cap* and *price* column should be numeric/double data type and not character.\n\n::: {.cell}\n\n```{.r .cell-code}\ncrypto <- crypto |> \n  mutate(\n    market_cap = str_remove_all(market_cap, r\"--[\\$[\\d.]+]--\"),\n    market_cap = parse_number(market_cap),\n    price = parse_number(price)\n  )\n\nstr(crypto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [200 × 4] (S3: tbl_df/tbl/data.frame)\n $ name      : chr [1:200] \"BTCBitcoin\" \"ETHEthereum\" \"USDTTether USDt\" \"BNBBNB\" ...\n $ symbol    : chr [1:200] \"BTC\" \"ETH\" \"USDT\" \"BNB\" ...\n $ market_cap: num [1:200] 1.30e+11 3.29e+08 3.97e+08 5.62e+08 3.41e+08 ...\n $ price     : num [1:200] 5.73e+04 3.15e+03 9.99e-01 5.26e+02 1.35e+02 ...\n```\n\n\n:::\n:::\n\n**Is the data complete?**\nI will check for missing data using `skimr` package\n\n::: {.cell}\n\n```{.r .cell-code}\nskimr::n_missing(crypto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 360\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nskimr::skim(crypto)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |       |\n|:------------------------|:------|\n|Name                     |crypto |\n|Number of rows           |200    |\n|Number of columns        |4      |\n|_______________________  |       |\n|Column type frequency:   |       |\n|character                |2      |\n|numeric                  |2      |\n|________________________ |       |\n|Group variables          |None   |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|name          |         0|             1|   3|  37|     0|      200|          0|\n|symbol        |         0|             1|   0|   4|   180|       21|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|         mean|           sd|       p0|          p25|         p50|          p75|         p100|hist  |\n|:-------------|---------:|-------------:|------------:|------------:|--------:|------------:|-----------:|------------:|------------:|:-----|\n|market_cap    |       180|           0.1| 6.856759e+09| 2.894509e+10| 31776567| 170507576.75| 344495461.0| 612731443.25| 1.298246e+11|▇▁▁▁▁ |\n|price         |       180|           0.1| 3.079420e+03| 1.278031e+04|        0|         0.86|         5.8|        85.67| 5.729499e+04|▇▁▁▁▁ |\n\n\n:::\n:::\n\n*market_cap* and *price* are having missing values and I will clean this to return only the complete rows and columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrypto <- crypto[complete.cases(crypto), ]\nskimr::skim_without_charts(crypto)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |       |\n|:------------------------|:------|\n|Name                     |crypto |\n|Number of rows           |20     |\n|Number of columns        |4      |\n|_______________________  |       |\n|Column type frequency:   |       |\n|character                |2      |\n|numeric                  |2      |\n|________________________ |       |\n|Group variables          |None   |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|name          |         0|             1|   6|  17|     0|       20|          0|\n|symbol        |         0|             1|   3|   4|     0|       20|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|         mean|           sd|       p0|          p25|         p50|          p75|         p100|\n|:-------------|---------:|-------------:|------------:|------------:|--------:|------------:|-----------:|------------:|------------:|\n|market_cap    |         0|             1| 6.856759e+09| 2.894509e+10| 31776567| 170507576.75| 344495461.0| 612731443.25| 1.298246e+11|\n|price         |         0|             1| 3.079420e+03| 1.278031e+04|        0|         0.86|         5.8|        85.67| 5.729499e+04|\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}